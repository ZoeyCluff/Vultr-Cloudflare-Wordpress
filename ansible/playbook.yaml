---
    - hosts: VPS
      become: true
      gather_facts: false
      remote_user: root
      become_user: root
      pre_tasks:
        - name: Install python2 for Ansible
          raw: bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qqy python-minimal python-setuptools)"
          register: output
          changed_when: output.stdout != ""
        - name: Create config folder
          file: path=/var/ansible/ state=directory



      vars:
        db_password: "{{ lookup('password', './passwordfile chars=ascii_letters,digits,hexdigits,punctuation') }}"



        - name: "cfemail"
          prompt: "What is your CloudFlare email?"
          private: no


        - name: "mysqluser"
          prompt: "What is your mysql user (that can create users and databases)?"
          default: root
          private: no

        - name: "mysqlpassword"
          prompt: "What is the password for your mysql user?"
          private: no

        - name: "mysqlHost"
          prompt: "What is the mysql Server IP / hostname?"
          default: 127.0.0.1
          private: no



      tasks:


        - name: Gathering Facts
          setup:


        - name: add vars file to automate
          include_vars:
              file: variables.yaml


        - name: allow the installation of PHP 7.1 on ubuntu 17.04
          apt_repository:
            repo: 'ppa:ondrej/php'
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")


        - name: copy Debians NGINX.conf config
          copy:
            src: ./configs/nginxDEBIAN.conf
            dest: /var/ansible/
            owner: root
            group: root

        #
        - name: copy CentOSs NGINX.conf config
          copy:
            src: ./configs/nginxCENTOS.conf
            dest: /var/ansible/
            owner: root
            group: root
            mode: 777

        - name: copy Debians NGINX config
          copy:
            src: ./configs/nginxconfigDEBIAN.conf.j2
            dest: /var/ansible/
            owner: root
            group: root
            mode: 777


        - name: ensure ssl folder exists
          file:
            path: /etc/nginx/ssl/
            state: directory

        - name: ensure ssl dhparam exists
          stat:
            path: /etc/nginx/ssl/dhparam.pem
          register: missingdhparam

        - name: ensure ssl folder exists
          file:
            path: /etc/nginx/ssl/
            state: directory
          when: missingdhparam.stat.exists == False

        - name: generate dhprams
          command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
          when: missingdhparam.stat.exists == False

        - name: update cache
          apt: update_cache=yes
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")


        - name: install epel first
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
            epel-release

        - name: install the php rpm from a remote repo
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum:
            name: http://rpms.remirepo.net/enterprise/remi-release-7.rpm
            state: present

        - name: update system

          apt: upgrade=dist
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")

        - name: upgrade all packages
          yum: name=* state=latest
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")

        - name: install packages
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
              - yum-utils



        - name: install packages
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
              - nginx
              - php71
              - php-mysqlnd
              - php-fpm
              - php-cli
              - php-gd
              - php-json
              - php-mbstring
              - php-mcrypt
              - php-readline
              - php-xml
              - php-zip
              - python-pip
              - mariadb-server
              - mariadb
              - certbot
              - MySQL-python

        - name: install packages
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          apt: name='{{ item }}' state=present
          with_items:
            - nginx
            - php7.0
            - php7.0-mysql
            - php7.0-fpm
            - php7.0-cli
            - php7.0-gd
            - php7.0-json
            - php7.0-mbstring
            - php7.0-mcrypt
            - php7.0-readline
            - php7.0-xml
            - php7.0-zip
            - python-pip
            - mysql-server
            - mysql-client
            - libmysqlclient-dev
            - certbot
            - python-mysqldb


        - name: start services
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
              name: mariadb
              state: started

        - name: Create a new databases
          mysql_db:
            name: "{{ domainShort }}"
            login_user: "root"
            state: present

        - name: Create a new user
          mysql_user:
            name: "{{ domainShort }}"
            login_user: "root"
            password: "{{ db_password }}"
            priv: '*.*:ALL'
            state: present



        - name: create www folder
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          file:
            path: "/var/www/{{domainLong}}"
            state: directory
            mode: 0755
            owner: www-data
            group: www-data

        - name: create www folder
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          file:
            path: "/var/www/{{domainLong}}"
            state: directory
            owner: apache
            group: apache

        - name: extract wordpress
          unarchive:
            src: https://wordpress.org/latest.tar.gz
            dest: "/var/www/{{domainLong}}"
            remote_src: yes
            extra_opts: [--strip-components=1]

        - name: Fetch random salts for WordPress config
          command: curl https://api.wordpress.org/secret-key/1.1/salt/
          register: "wp_salt"


        - name: create letsencrypt directory
          file: name=/var/www/letsencrypt state=directory

        - name: Install nginx config for Debian HTTPS site
          template:
              src: ./configs/nginxconfigDEBIAN.conf.j2
              dest: "/etc/nginx/sites-enabled/{{domainLong}}.conf"
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")

        - name: Install nginx config for CENTOS HTTPS site
          template:
              src: ./configs/nginxconfigCENTOS.conf.j2
              dest: "/etc/nginx/conf.d/{{domainLong}}.conf"
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")


        - name: Install nginx config for Debian/ Ubuntu
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          copy:
              src: ./configs/nginxDEBIAN.conf
              dest: "/etc/nginx/nginx.conf"

        - name: Install nginx config for CentOS
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          copy:
              src: ./configs/nginxCENTOS.conf
              dest: "/etc/nginx/nginx.conf"

        - name: Install Wordpress config
          template:
            src: ./configs/wp-config-sample.php.j2
            dest: "/var/www/{{domainLong}}/wp-config.php"

        - name: fix permissions the lazy way
          shell:
            chdir: "/var/www/{{domainLong}}"
            cmd: find . -type f -exec chmod 664 {} +

        - name: fix permissions the lazy way
          shell:
            chdir: "/var/www/{{domainLong}}"
            cmd: find . -type d -exec chmod 775 {} +

        - name: change folder permissions
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          file:
            path: "/var/www/{{domainLong}}"
            owner: www-data
            group: www-data
            recurse: yes

        - name: change folder permissions
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          file:
            path: "/var/www/{{domainLong}}"
            owner: apache
            group: apache
            recurse: yes

        - name: Open https on the firewall
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          firewalld:
            service: https
            permanent: true
            state: enabled

        - name: Open http on the firewall
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          firewalld:
            service: http
            permanent: true
            state: enabled

        - name: restart firewalld
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
              name: firewalld
              state: restarted

        - name: open ports
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          ufw:
              rule: allow
              port: '80'
              proto: tcp

        - name: open ports
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          ufw:
              rule: allow
              port: '443'
              proto: tcp

        - name: generate letsencrypt certificate
          shell: certbot certonly --agree-tos --staging -a standalone -m {{ cfemail }} -d {{domainLong}} -d www.{{domainLong}}
          args:
            creates: /etc/letsencrypt/live/{{ domainLong }}


        - name: start services
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          service:
            name: php7.0-fpm
            state: started



        - name: start services
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
            name: php-fpm
            state: started

        - name: Add letsencrypt cronjob for cert renewal
          cron:
            name: letsencrypt_renewal
            special_time: weekly
            job: letsencrypt --renew certonly -n -a standalone -m {{ cfemail }} --agree-tos -d {{ domainLong }} -d www.{{domainLong}} && service nginx restart

        - name: restart NGINX for new config to take effect
          service:
            name: nginx
            state: restarted
